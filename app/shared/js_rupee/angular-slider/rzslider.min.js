!function (i, t) { "use strict"; "function" == typeof define && define.amd?define(["angular"], t):"object" == typeof module && module.exports?module.exports = t(require("angular")):t(i.angular) }(this, function (i) { "use strict"; var t = i.module("rzModule", []).factory("RzSliderOptions", function () { var t = { floor: 0, ceil: null, step: 1, precision: 0, minRange: null, maxRange: null, minLimit: null, maxLimit: null, id: null, translate: null, getLegend: null, stepsArray: null, draggableRange: !1, draggableRangeOnly: !1, showSelectionBar: !1, showSelectionBarEnd: !1, showSelectionBarFromValue: null, hidePointerLabels: !1, hideLimitLabels: !1, readOnly: !1, disabled: !1, interval: 350, showTicks: !1, showTicksValues: !1, ticksTooltip: null, ticksValuesTooltip: null, vertical: !1, getSelectionBarColor: null, getPointerColor: null, keyboardSupport: !0, scale: 1, enforceStep: !0, enforceRange: !1, noSwitching: !1, onlyBindHandles: !1, onStart: null, onChange: null, onEnd: null, rightToLeft: !1, boundPointerLabels: !0, mergeRangeLabelsIfSame: !1 }, s = {}, e = {}; return e.options = function (t) { i.extend(s, t) }, e.getOptions = function (e) { return i.extend({}, t, s, e) }, e }).factory("rzThrottle", ["$timeout", function (i) { return function (t, s, e) { var n, a, o, h = Date.now || function () { return (new Date).getTime() }, l = null, r = 0; e = e || {}; var u = function () { r = h(), l = null, o = t.apply(n, a), n = a = null }; return function () { var p = h(), c = s - (p - r); return n = this, a = arguments, 0 >= c?(i.cancel(l), l = null, r = p, o = t.apply(n, a), n = a = null):l || e.trailing === !1 || (l = i(u, c)), o } } }]).factory("RzSlider", ["$timeout", "$document", "$window", "$compile", "RzSliderOptions", "rzThrottle", function (t, s, e, n, a, o) { var h = function (i, t) { this.scope = i, this.lowValue = 0, this.highValue = 0, this.sliderElem = t, this.range = void 0 !== this.scope.rzSliderModel && void 0 !== this.scope.rzSliderHigh, this.dragging = { active: !1, value: 0, difference: 0, offset: 0, lowLimit: 0, highLimit: 0 }, this.positionProperty = "left", this.dimensionProperty = "width", this.handleHalfDim = 0, this.maxPos = 0, this.precision = 0, this.step = 1, this.tracking = "", this.minValue = 0, this.maxValue = 0, this.valueRange = 0, this.intermediateTicks = !1, this.initHasRun = !1, this.firstKeyDown = !1, this.internalChange = !1, this.fullBar = null, this.selBar = null, this.minH = null, this.maxH = null, this.flrLab = null, this.ceilLab = null, this.minLab = null, this.maxLab = null, this.cmbLab = null, this.ticks = null, this.init() }; return h.prototype = { init: function () { var t, s, n = this, a = function () { n.calcViewDimensions() }; this.applyOptions(), this.syncLowValue(), this.range && this.syncHighValue(), this.initElemHandles(), this.manageElementsStyle(), this.setDisabledState(), this.calcViewDimensions(), this.setMinAndMax(), this.addAccessibility(), this.updateCeilLab(), this.updateFloorLab(), this.initHandles(), this.manageEventsBindings(), this.scope.$on("reCalcViewDimensions", a), i.element(e).on("resize", a), this.initHasRun = !0, t = o(function () { n.onLowHandleChange() }, n.options.interval), s = o(function () { n.onHighHandleChange() }, n.options.interval), this.scope.$on("rzSliderForceRender", function () { n.resetLabelsValue(), t(), n.range && s(), n.resetSlider() }), this.scope.$watch("rzSliderOptions()", function (i, t) { i !== t && (n.applyOptions(), n.syncLowValue(), n.range && n.syncHighValue(), n.resetSlider()) }, !0), this.scope.$watch("rzSliderModel", function (i, s) { n.internalChange || i !== s && t() }), this.scope.$watch("rzSliderHigh", function (i, t) { n.internalChange || i !== t && (null != i && s(), (n.range && null == i || !n.range && null != i) && (n.applyOptions(), n.resetSlider())) }), this.scope.$on("$destroy", function () { n.unbindEvents(), i.element(e).off("resize", a) }) }, findStepIndex: function (t) { for (var s = 0, e = 0; e < this.options.stepsArray.length; e++) { var n = this.options.stepsArray[e]; if (n === t) { s = e; break } if (i.isObject(n) && n.value === t) { s = e; break } } return s }, syncLowValue: function () { this.options.stepsArray?this.lowValue = this.findStepIndex(this.scope.rzSliderModel):this.lowValue = this.scope.rzSliderModel }, syncHighValue: function () { this.options.stepsArray?this.highValue = this.findStepIndex(this.scope.rzSliderHigh):this.highValue = this.scope.rzSliderHigh }, getStepValue: function (t) { var s = this.options.stepsArray[t]; return i.isObject(s)?s.value:s }, applyLowValue: function () { this.options.stepsArray?this.scope.rzSliderModel = this.getStepValue(this.lowValue):this.scope.rzSliderModel = this.lowValue }, applyHighValue: function () { this.options.stepsArray?this.scope.rzSliderHigh = this.getStepValue(this.highValue):this.scope.rzSliderHigh = this.highValue }, onLowHandleChange: function () { this.syncLowValue(), this.range && this.syncHighValue(), this.setMinAndMax(), this.updateLowHandle(this.valueToOffset(this.lowValue)), this.updateSelectionBar(), this.updateTicksScale(), this.updateAriaAttributes(), this.range && this.updateCmbLabel() }, onHighHandleChange: function () { this.syncLowValue(), this.syncHighValue(), this.setMinAndMax(), this.updateHighHandle(this.valueToOffset(this.highValue)), this.updateSelectionBar(), this.updateTicksScale(), this.updateCmbLabel(), this.updateAriaAttributes() }, applyOptions: function () { var t; t = this.scope.rzSliderOptions?this.scope.rzSliderOptions():{}, this.options = a.getOptions(t), this.options.step <= 0 && (this.options.step = 1), this.range = void 0 !== this.scope.rzSliderModel && void 0 !== this.scope.rzSliderHigh, this.options.draggableRange = this.range && this.options.draggableRange, this.options.draggableRangeOnly = this.range && this.options.draggableRangeOnly, this.options.draggableRangeOnly && (this.options.draggableRange = !0), this.options.showTicks = this.options.showTicks || this.options.showTicksValues, this.scope.showTicks = this.options.showTicks, i.isNumber(this.options.showTicks) && (this.intermediateTicks = !0), this.options.showSelectionBar = this.options.showSelectionBar || this.options.showSelectionBarEnd || null !== this.options.showSelectionBarFromValue, this.options.stepsArray?this.parseStepsArray():(this.options.translate?this.customTrFn = this.options.translate:this.customTrFn = function (i) { return String(i) }, this.options.getLegend && (this.getLegend = this.options.getLegend)), this.options.vertical && (this.positionProperty = "bottom", this.dimensionProperty = "height") }, parseStepsArray: function () { this.options.floor = 0, this.options.ceil = this.options.stepsArray.length - 1, this.options.step = 1, this.options.translate?this.customTrFn = this.options.translate:this.customTrFn = function (i) { return i }, this.getLegend = function (t) { var s = this.options.stepsArray[t]; return i.isObject(s)?s.legend:null } }, resetSlider: function () { this.manageElementsStyle(), this.addAccessibility(), this.setMinAndMax(), this.updateCeilLab(), this.updateFloorLab(), this.unbindEvents(), this.manageEventsBindings(), this.setDisabledState(), this.calcViewDimensions() }, initElemHandles: function () { i.forEach(this.sliderElem.children(), function (t, s) { var e = i.element(t); switch (s) {case 0: this.fullBar = e; break;case 1: this.selBar = e; break;case 2: this.minH = e; break;case 3: this.maxH = e; break;case 4: this.flrLab = e; break;case 5: this.ceilLab = e; break;case 6: this.minLab = e; break;case 7: this.maxLab = e; break;case 8: this.cmbLab = e; break;case 9: this.ticks = e} }, this), this.selBar.rzsp = 0, this.minH.rzsp = 0, this.maxH.rzsp = 0, this.flrLab.rzsp = 0, this.ceilLab.rzsp = 0, this.minLab.rzsp = 0, this.maxLab.rzsp = 0, this.cmbLab.rzsp = 0 }, manageElementsStyle: function () { this.range?this.maxH.css("display", ""):this.maxH.css("display", "none"), this.alwaysHide(this.flrLab, this.options.showTicksValues || this.options.hideLimitLabels), this.alwaysHide(this.ceilLab, this.options.showTicksValues || this.options.hideLimitLabels); var i = this.options.showTicksValues && !this.intermediateTicks; this.alwaysHide(this.minLab, i || this.options.hidePointerLabels), this.alwaysHide(this.maxLab, i || !this.range || this.options.hidePointerLabels), this.alwaysHide(this.cmbLab, i || !this.range || this.options.hidePointerLabels), this.alwaysHide(this.selBar, !this.range && !this.options.showSelectionBar), this.options.vertical && this.sliderElem.addClass("rz-vertical"), this.options.draggableRange?this.selBar.addClass("rz-draggable"):this.selBar.removeClass("rz-draggable"), this.intermediateTicks && this.options.showTicksValues && this.ticks.addClass("rz-ticks-values-under") }, alwaysHide: function (i, t) { i.rzAlwaysHide = t, t?this.hideEl(i):this.showEl(i) }, manageEventsBindings: function () { this.options.disabled || this.options.readOnly?this.unbindEvents():this.bindEvents() }, setDisabledState: function () { this.options.disabled?this.sliderElem.attr("disabled", "disabled"):this.sliderElem.attr("disabled", null) }, resetLabelsValue: function () { this.minLab.rzsv = void 0, this.maxLab.rzsv = void 0 }, initHandles: function () { this.updateLowHandle(this.valueToOffset(this.lowValue)), this.range && this.updateHighHandle(this.valueToOffset(this.highValue)), this.updateSelectionBar(), this.range && this.updateCmbLabel(), this.updateTicksScale() }, translateFn: function (i, t, s, e) { e = void 0 === e?!0:e; var n = "", a = !1; e?(this.options.stepsArray && (i = this.getStepValue(i)), n = String(this.customTrFn(i, this.options.id, s))):n = String(i), (void 0 === t.rzsv || t.rzsv.length !== n.length || t.rzsv.length > 0 && 0 === t.rzsd) && (a = !0, t.rzsv = n), t.html(n), a && this.getDimension(t) }, setMinAndMax: function () { this.step = +this.options.step, this.precision = +this.options.precision, this.minValue = this.options.floor, this.options.enforceStep && (this.lowValue = this.roundStep(this.lowValue), this.range && (this.highValue = this.roundStep(this.highValue))), null != this.options.ceil?this.maxValue = this.options.ceil:this.maxValue = this.options.ceil = this.range?this.highValue:this.lowValue, this.options.enforceRange && (this.lowValue = this.sanitizeValue(this.lowValue), this.range && (this.highValue = this.sanitizeValue(this.highValue))), this.applyLowValue(), this.range && this.applyHighValue(), this.valueRange = this.maxValue - this.minValue }, addAccessibility: function () { this.minH.attr("role", "slider"), this.updateAriaAttributes(), !this.options.keyboardSupport || this.options.readOnly || this.options.disabled?this.minH.attr("tabindex", ""):this.minH.attr("tabindex", "0"), this.options.vertical && this.minH.attr("aria-orientation", "vertical"), this.range && (this.maxH.attr("role", "slider"), !this.options.keyboardSupport || this.options.readOnly || this.options.disabled?this.maxH.attr("tabindex", ""):this.maxH.attr("tabindex", "0"), this.options.vertical && this.maxH.attr("aria-orientation", "vertical")) }, updateAriaAttributes: function () { this.minH.attr({ "aria-valuenow": this.scope.rzSliderModel, "aria-valuetext": this.customTrFn(this.scope.rzSliderModel, this.options.id, "model"), "aria-valuemin": this.minValue, "aria-valuemax": this.maxValue }), this.range && this.maxH.attr({ "aria-valuenow": this.scope.rzSliderHigh, "aria-valuetext": this.customTrFn(this.scope.rzSliderHigh, this.options.id, "high"), "aria-valuemin": this.minValue, "aria-valuemax": this.maxValue }) }, calcViewDimensions: function () { var i = this.getDimension(this.minH); this.handleHalfDim = i / 2, this.barDimension = this.getDimension(this.fullBar), this.maxPos = this.barDimension - i, this.getDimension(this.sliderElem), this.sliderElem.rzsp = this.sliderElem[0].getBoundingClientRect()[this.positionProperty], this.initHasRun && (this.updateFloorLab(), this.updateCeilLab(), this.initHandles()) }, updateTicksScale: function () { if (this.options.showTicks) { var i = this.step; this.intermediateTicks && (i = this.options.showTicks); var t = Math.round((this.maxValue - this.minValue) / i) + 1; this.scope.ticks = []; for (var s = 0; t > s; s++) { var e = this.roundStep(this.minValue + s * i), n = { selected: this.isTickSelected(e) }; if (n.selected && this.options.getSelectionBarColor && (n.style = { "background-color": this.getSelectionBarColor() }), this.options.ticksTooltip && (n.tooltip = this.options.ticksTooltip(e), n.tooltipPlacement = this.options.vertical?"right":"top"), this.options.showTicksValues && (n.value = this.getDisplayValue(e, "tick-value"), this.options.ticksValuesTooltip && (n.valueTooltip = this.options.ticksValuesTooltip(e), n.valueTooltipPlacement = this.options.vertical?"right":"top")), this.getLegend) { var a = this.getLegend(e, this.options.id); a && (n.legend = a) } this.options.rightToLeft?this.scope.ticks.unshift(n):this.scope.ticks.push(n) } } }, isTickSelected: function (i) { if (!this.range) if (null !== this.options.showSelectionBarFromValue) { var t = this.options.showSelectionBarFromValue; if (this.lowValue > t && i >= t && i <= this.lowValue) return !0; if (this.lowValue < t && t >= i && i >= this.lowValue) return !0 } else if (this.options.showSelectionBarEnd) { if (i >= this.lowValue) return !0 } else if (this.options.showSelectionBar && i <= this.lowValue) return !0; return this.range && i >= this.lowValue && i <= this.highValue?!0:!1 }, updateFloorLab: function () { this.translateFn(this.minValue, this.flrLab, "floor"), this.getDimension(this.flrLab); var i = this.options.rightToLeft?this.barDimension - this.flrLab.rzsd:0; this.setPosition(this.flrLab, i) }, updateCeilLab: function () { this.translateFn(this.maxValue, this.ceilLab, "ceil"), this.getDimension(this.ceilLab); var i = this.options.rightToLeft?0:this.barDimension - this.ceilLab.rzsd; this.setPosition(this.ceilLab, i) }, updateHandles: function (i, t) { "lowValue" === i?this.updateLowHandle(t):this.updateHighHandle(t), this.updateSelectionBar(), this.updateTicksScale(), this.range && this.updateCmbLabel() }, getHandleLabelPos: function (i, t) { var s = this[i].rzsd, e = t - s / 2 + this.handleHalfDim, n = this.barDimension - s; return this.options.boundPointerLabels?this.options.rightToLeft && "minLab" === i || !this.options.rightToLeft && "maxLab" === i?Math.min(e, n):Math.min(Math.max(e, 0), n):e }, updateLowHandle: function (i) { if (this.setPosition(this.minH, i), this.translateFn(this.lowValue, this.minLab, "model"), this.setPosition(this.minLab, this.getHandleLabelPos("minLab", i)), this.options.getPointerColor) { var t = this.getPointerColor("min"); this.scope.minPointerStyle = { backgroundColor: t } } this.shFloorCeil() }, updateHighHandle: function (i) { if (this.setPosition(this.maxH, i), this.translateFn(this.highValue, this.maxLab, "high"), this.setPosition(this.maxLab, this.getHandleLabelPos("maxLab", i)), this.options.getPointerColor) { var t = this.getPointerColor("max"); this.scope.maxPointerStyle = { backgroundColor: t } } this.shFloorCeil() }, shFloorCeil: function () { var i = !1, t = !1, s = this.options.rightToLeft, e = this.flrLab.rzsp, n = this.flrLab.rzsd, a = this.minLab.rzsp, o = this.minLab.rzsd, h = this.maxLab.rzsp, l = this.maxLab.rzsd, r = this.ceilLab.rzsp, u = this.handleHalfDim, p = s?a + o >= e - n - 5:e + n + 5 >= a, c = s?r + u + 10 >= a - o:a + o >= r - u - 10, d = s?h >= e - n - u:e + n + u >= h, g = s?r + 10 >= h - l:h + l >= r - 10; p?(i = !0, this.hideEl(this.flrLab)):(i = !1, this.showEl(this.flrLab)), c?(t = !0, this.hideEl(this.ceilLab)):(t = !1, this.showEl(this.ceilLab)), this.range && (g?this.hideEl(this.ceilLab):t || this.showEl(this.ceilLab), d?this.hideEl(this.flrLab):i || this.showEl(this.flrLab)) }, updateSelectionBar: function () { var i = 0, t = 0, s = this.options.rightToLeft?!this.options.showSelectionBarEnd:this.options.showSelectionBarEnd, e = this.options.rightToLeft?this.maxH.rzsp + this.handleHalfDim:this.minH.rzsp + this.handleHalfDim; if (this.range) t = Math.abs(this.maxH.rzsp - this.minH.rzsp), i = e; else if (null !== this.options.showSelectionBarFromValue) { var n = this.options.showSelectionBarFromValue, a = this.valueToOffset(n), o = this.options.rightToLeft?this.lowValue <= n:this.lowValue > n; o?(t = this.minH.rzsp - a, i = a + this.handleHalfDim):(t = a - this.minH.rzsp, i = this.minH.rzsp + this.handleHalfDim) } else s?(t = Math.abs(this.maxPos - this.minH.rzsp) + this.handleHalfDim, i = this.minH.rzsp + this.handleHalfDim):(t = Math.abs(this.maxH.rzsp - this.minH.rzsp) + this.handleHalfDim, i = 0); if (this.setDimension(this.selBar, t), this.setPosition(this.selBar, i), this.options.getSelectionBarColor) { var h = this.getSelectionBarColor(); this.scope.barStyle = { backgroundColor: h } } }, getSelectionBarColor: function () { return this.range?this.options.getSelectionBarColor(this.scope.rzSliderModel, this.scope.rzSliderHigh):this.options.getSelectionBarColor(this.scope.rzSliderModel) }, getPointerColor: function (i) { return "max" === i?this.options.getPointerColor(this.scope.rzSliderHigh, i):this.options.getPointerColor(this.scope.rzSliderModel, i) }, updateCmbLabel: function () { var i = null; if (i = this.options.rightToLeft?this.minLab.rzsp - this.minLab.rzsd - 10 <= this.maxLab.rzsp:this.minLab.rzsp + this.minLab.rzsd + 10 >= this.maxLab.rzsp) { var t = this.getDisplayValue(this.lowValue, "model"), s = this.getDisplayValue(this.highValue, "high"), e = ""; e = this.options.mergeRangeLabelsIfSame && t === s?t:this.options.rightToLeft?s + " - " + t:t + " - " + s, this.translateFn(e, this.cmbLab, "cmb", !1); var n = this.options.boundPointerLabels?Math.min(Math.max(this.selBar.rzsp + this.selBar.rzsd / 2 - this.cmbLab.rzsd / 2, 0), this.barDimension - this.cmbLab.rzsd):this.selBar.rzsp + this.selBar.rzsd / 2 - this.cmbLab.rzsd / 2; this.setPosition(this.cmbLab, n), this.hideEl(this.minLab), this.hideEl(this.maxLab), this.showEl(this.cmbLab) } else this.showEl(this.maxLab), this.showEl(this.minLab), this.hideEl(this.cmbLab) }, getDisplayValue: function (i, t) { return this.options.stepsArray && (i = this.getStepValue(i)), this.customTrFn(i, this.options.id, t) }, roundStep: function (i, t) { var s = t?t:this.step, e = parseFloat((i - this.minValue) / s).toPrecision(12); e = Math.round(+e) * s; var n = (this.minValue + e).toFixed(this.precision); return +n }, hideEl: function (i) { return i.css({ opacity: 0 }) }, showEl: function (i) { return i.rzAlwaysHide?i:i.css({ opacity: 1 }) }, setPosition: function (i, t) { i.rzsp = t; var s = {}; return s[this.positionProperty] = t + "px", i.css(s), t }, getDimension: function (i) { var t = i[0].getBoundingClientRect(); return this.options.vertical?i.rzsd = (t.bottom - t.top) * this.options.scale:i.rzsd = (t.right - t.left) * this.options.scale, i.rzsd }, setDimension: function (i, t) { i.rzsd = t; var s = {}; return s[this.dimensionProperty] = t + "px", i.css(s), t }, valueToOffset: function (i) { return this.options.rightToLeft?(this.maxValue - this.sanitizeValue(i)) * this.maxPos / this.valueRange || 0:(this.sanitizeValue(i) - this.minValue) * this.maxPos / this.valueRange || 0 }, sanitizeValue: function (i) { return Math.min(Math.max(i, this.minValue), this.maxValue) }, offsetToValue: function (i) { return this.options.rightToLeft?(1 - i / this.maxPos) * this.valueRange + this.minValue:i / this.maxPos * this.valueRange + this.minValue }, getEventXY: function (i) { var t = this.options.vertical?"clientY":"clientX"; return t in i?i[t]:void 0 === i.originalEvent?i.touches[0][t]:i.originalEvent.touches[0][t] }, getEventPosition: function (i) { var t = this.sliderElem.rzsp, s = 0; return s = this.options.vertical?-this.getEventXY(i) + t:this.getEventXY(i) - t, (s - this.handleHalfDim) * this.options.scale }, getEventNames: function (i) { var t = { moveEvent: "", endEvent: "" }; return i.touches || void 0 !== i.originalEvent && i.originalEvent.touches?(t.moveEvent = "touchmove", t.endEvent = "touchend"):(t.moveEvent = "mousemove", t.endEvent = "mouseup"), t }, getNearestHandle: function (i) { if (!this.range) return this.minH; var t = this.getEventPosition(i), s = Math.abs(t - this.minH.rzsp), e = Math.abs(t - this.maxH.rzsp); return e > s?this.minH:s > e?this.maxH:this.options.rightToLeft?t > this.minH.rzsp?this.minH:this.maxH:t < this.minH.rzsp?this.minH:this.maxH }, focusElement: function (i) { var t = 0; i[t].focus() }, bindEvents: function () { var t, s, e; this.options.draggableRange?(t = "rzSliderDrag", s = this.onDragStart, e = this.onDragMove):(t = "lowValue", s = this.onStart, e = this.onMove), this.options.onlyBindHandles || (this.selBar.on("mousedown", i.bind(this, s, null, t)), this.selBar.on("mousedown", i.bind(this, e, this.selBar))), this.options.draggableRangeOnly?(this.minH.on("mousedown", i.bind(this, s, null, t)), this.maxH.on("mousedown", i.bind(this, s, null, t))):(this.minH.on("mousedown", i.bind(this, this.onStart, this.minH, "lowValue")), this.range && this.maxH.on("mousedown", i.bind(this, this.onStart, this.maxH, "highValue")), this.options.onlyBindHandles || (this.fullBar.on("mousedown", i.bind(this, this.onStart, null, null)), this.fullBar.on("mousedown", i.bind(this, this.onMove, this.fullBar)), this.ticks.on("mousedown", i.bind(this, this.onStart, null, null)), this.ticks.on("mousedown", i.bind(this, this.onTickClick, this.ticks)))), this.options.onlyBindHandles || (this.selBar.on("touchstart", i.bind(this, s, null, t)), this.selBar.on("touchstart", i.bind(this, e, this.selBar))), this.options.draggableRangeOnly?(this.minH.on("touchstart", i.bind(this, s, null, t)), this.maxH.on("touchstart", i.bind(this, s, null, t))):(this.minH.on("touchstart", i.bind(this, this.onStart, this.minH, "lowValue")), this.range && this.maxH.on("touchstart", i.bind(this, this.onStart, this.maxH, "highValue")), this.options.onlyBindHandles || (this.fullBar.on("touchstart", i.bind(this, this.onStart, null, null)), this.fullBar.on("touchstart", i.bind(this, this.onMove, this.fullBar)), this.ticks.on("touchstart", i.bind(this, this.onStart, null, null)), this.ticks.on("touchstart", i.bind(this, this.onTickClick, this.ticks)))), this.options.keyboardSupport && (this.minH.on("focus", i.bind(this, this.onPointerFocus, this.minH, "lowValue")), this.range && this.maxH.on("focus", i.bind(this, this.onPointerFocus, this.maxH, "highValue"))) }, unbindEvents: function () { this.minH.off(), this.maxH.off(), this.fullBar.off(), this.selBar.off(), this.ticks.off() }, onStart: function (t, e, n) { var a, o, h = this.getEventNames(n); n.stopPropagation(), n.preventDefault(), this.calcViewDimensions(), t?this.tracking = e:(t = this.getNearestHandle(n), this.tracking = t === this.minH?"lowValue":"highValue"), t.addClass("rz-active"), this.options.keyboardSupport && this.focusElement(t), a = i.bind(this, this.dragging.active?this.onDragMove:this.onMove, t), o = i.bind(this, this.onEnd, a), s.on(h.moveEvent, a), s.one(h.endEvent, o), this.callOnStart() }, onMove: function (t, s, e) { var n, a = this.getEventPosition(s), o = this.options.rightToLeft?this.minValue:this.maxValue, h = this.options.rightToLeft?this.maxValue:this.minValue; 0 >= a?n = h:a >= this.maxPos?n = o:(n = this.offsetToValue(a), n = e && i.isNumber(this.options.showTicks)?this.roundStep(n, this.options.showTicks):this.roundStep(n)), this.positionTrackingHandle(n) }, onEnd: function (i, t) { var e = this.getEventNames(t).moveEvent; this.options.keyboardSupport || (this.minH.removeClass("rz-active"), this.maxH.removeClass("rz-active"), this.tracking = ""), this.dragging.active = !1, s.off(e, i), this.callOnEnd() }, onTickClick: function (i, t) { this.onMove(i, t, !0) }, onPointerFocus: function (t, s) { this.tracking = s, t.one("blur", i.bind(this, this.onPointerBlur, t)), t.on("keydown", i.bind(this, this.onKeyboardEvent)), t.on("keyup", i.bind(this, this.onKeyUp)), this.firstKeyDown = !0, t.addClass("rz-active") }, onKeyUp: function () { this.firstKeyDown = !0, this.callOnEnd() }, onPointerBlur: function (i) { i.off("keydown"), i.off("keyup"), this.tracking = "", i.removeClass("rz-active") }, getKeyActions: function (i) { var t = i + this.step, s = i - this.step, e = i + this.valueRange / 10, n = i - this.valueRange / 10, a = { UP: t, DOWN: s, LEFT: s, RIGHT: t, PAGEUP: e, PAGEDOWN: n, HOME: this.minValue, END: this.maxValue }; return this.options.rightToLeft && (a.LEFT = t, a.RIGHT = s, this.options.vertical && (a.UP = s, a.DOWN = t)), a }, onKeyboardEvent: function (i) { var s = this[this.tracking], e = i.keyCode || i.which, n = { 38: "UP", 40: "DOWN", 37: "LEFT", 39: "RIGHT", 33: "PAGEUP", 34: "PAGEDOWN", 36: "HOME", 35: "END" }, a = this.getKeyActions(s), o = n[e], h = a[o]; if (null != h && "" !== this.tracking) { i.preventDefault(), this.firstKeyDown && (this.firstKeyDown = !1, this.callOnStart()); var l = this; t(function () { var i = l.roundStep(l.sanitizeValue(h)); if (l.options.draggableRangeOnly) { var t, s, e = l.highValue - l.lowValue; "lowValue" === l.tracking?(t = i, s = i + e, s > l.maxValue && (s = l.maxValue, t = s - e)):(s = i, t = i - e, t < l.minValue && (t = l.minValue, s = t + e)), l.positionTrackingBar(t, s) } else l.positionTrackingHandle(i) }) } }, onDragStart: function (i, t, s) { var e = this.getEventPosition(s); this.dragging = { active: !0, value: this.offsetToValue(e), difference: this.highValue - this.lowValue, lowLimit: this.options.rightToLeft?this.minH.rzsp - e:e - this.minH.rzsp, highLimit: this.options.rightToLeft?e - this.maxH.rzsp:this.maxH.rzsp - e }, this.onStart(i, t, s) }, getValue: function (i, t, s, e) { var n = this.options.rightToLeft, a = null; return a = "min" === i?s?e?n?this.minValue:this.maxValue - this.dragging.difference:n?this.maxValue - this.dragging.difference:this.minValue:n?this.offsetToValue(t + this.dragging.lowLimit):this.offsetToValue(t - this.dragging.lowLimit):s?e?n?this.minValue + this.dragging.difference:this.maxValue:n?this.maxValue:this.minValue + this.dragging.difference:n?this.offsetToValue(t + this.dragging.lowLimit) + this.dragging.difference:this.offsetToValue(t - this.dragging.lowLimit) + this.dragging.difference, this.roundStep(a) }, onDragMove: function (i, t) { var s, e, n, a, o, h, l, r, u = this.getEventPosition(t); if (this.options.rightToLeft?(n = this.dragging.lowLimit, a = this.dragging.highLimit, l = this.maxH, r = this.minH):(n = this.dragging.highLimit, a = this.dragging.lowLimit, l = this.minH, r = this.maxH), o = a >= u, h = u >= this.maxPos - n, o) { if (0 === l.rzsp) return; s = this.getValue("min", u, !0, !1), e = this.getValue("max", u, !0, !1) } else if (h) { if (r.rzsp === this.maxPos) return; e = this.getValue("max", u, !0, !0), s = this.getValue("min", u, !0, !0) } else s = this.getValue("min", u, !1), e = this.getValue("max", u, !1); this.positionTrackingBar(s, e) }, positionTrackingBar: function (i, t) { this.lowValue = i, this.highValue = t, this.applyLowValue(), this.range && this.applyHighValue(), this.applyModel(), this.updateHandles("lowValue", this.valueToOffset(i)), this.updateHandles("highValue", this.valueToOffset(t)) }, positionTrackingHandle: function (i) { var t = !1; i = this.applyMinMaxLimit(i), this.range && (i = this.applyMinMaxRange(i), "lowValue" === this.tracking && i > this.highValue?(this.options.noSwitching && this.highValue !== this.minValue?i = this.applyMinMaxRange(this.highValue):(this.lowValue = this.highValue, this.applyLowValue(), this.updateHandles(this.tracking, this.maxH.rzsp), this.updateAriaAttributes(), this.tracking = "highValue", this.minH.removeClass("rz-active"), this.maxH.addClass("rz-active"), this.options.keyboardSupport && this.focusElement(this.maxH)), t = !0):"highValue" === this.tracking && i < this.lowValue && (this.options.noSwitching && this.lowValue !== this.maxValue?i = this.applyMinMaxRange(this.lowValue):(this.highValue = this.lowValue, this.applyHighValue(), this.updateHandles(this.tracking, this.minH.rzsp), this.updateAriaAttributes(), this.tracking = "lowValue", this.maxH.removeClass("rz-active"), this.minH.addClass("rz-active"), this.options.keyboardSupport && this.focusElement(this.minH)), t = !0)), this[this.tracking] !== i && (this[this.tracking] = i, "lowValue" === this.tracking?this.applyLowValue():this.applyHighValue(), this.updateHandles(this.tracking, this.valueToOffset(i)), this.updateAriaAttributes(), t = !0), t && this.applyModel() }, applyMinMaxLimit: function (i) { return null != this.options.minLimit && i < this.options.minLimit?this.options.minLimit:null != this.options.maxLimit && i > this.options.maxLimit?this.options.maxLimit:i }, applyMinMaxRange: function (i) { var t = "lowValue" === this.tracking?this.highValue:this.lowValue, s = Math.abs(i - t); return null != this.options.minRange && s < this.options.minRange?"lowValue" === this.tracking?this.highValue - this.options.minRange:this.lowValue + this.options.minRange:null != this.options.maxRange && s > this.options.maxRange?"lowValue" === this.tracking?this.highValue - this.options.maxRange:this.lowValue + this.options.maxRange:i }, applyModel: function () { this.internalChange = !0, this.scope.$apply(), this.callOnChange(), this.internalChange = !1 }, callOnStart: function () { if (this.options.onStart) { var i = this, t = "lowValue" === this.tracking?"min":"max"; this.scope.$evalAsync(function () { i.options.onStart(i.options.id, i.scope.rzSliderModel, i.scope.rzSliderHigh, t) }) } }, callOnChange: function () { if (this.options.onChange) { var i = this, t = "lowValue" === this.tracking?"min":"max"; this.scope.$evalAsync(function () { i.options.onChange(i.options.id, i.scope.rzSliderModel, i.scope.rzSliderHigh, t) }) } }, callOnEnd: function () { if (this.options.onEnd) { var i = this, t = "lowValue" === this.tracking?"min":"max"; this.scope.$evalAsync(function () { i.options.onEnd(i.options.id, i.scope.rzSliderModel, i.scope.rzSliderHigh, t) }) } this.scope.$emit("slideEnded") } }, h }]).directive("rzslider", ["RzSlider", function (i) { return { restrict: "AE", replace: !0, scope: { rzSliderModel: "=?", rzSliderHigh: "=?", rzSliderOptions: "&?", rzSliderTplUrl: "@" }, templateUrl: function (i, t) { return t.rzSliderTplUrl || "rzSliderTpl.html" }, link: function (t, s) { t.slider = new i(t, s) } } }]); return t.run(["$templateCache", function (i) { i.put("rzSliderTpl.html", '<div class=rzslider><span class=rz-bar-wrapper><span class=rz-bar></span></span> <span class=rz-bar-wrapper><span class="rz-bar rz-selection" ng-style=barStyle></span></span> <span class="rz-pointer rz-pointer-min" ng-style=minPointerStyle></span> <span class="rz-pointer rz-pointer-max" ng-style=maxPointerStyle></span> <span class="rz-bubble rz-limit rz-floor"></span> <span class="rz-bubble rz-limit rz-ceil"></span> <span class=rz-bubble></span> <span class=rz-bubble></span> <span class=rz-bubble></span><ul ng-show=showTicks class=rz-ticks><li ng-repeat="t in ticks track by $index" class=rz-tick ng-class="{\'rz-selected\': t.selected}" ng-style=t.style ng-attr-uib-tooltip="{{ t.tooltip }}" ng-attr-tooltip-placement={{t.tooltipPlacement}} ng-attr-tooltip-append-to-body="{{ t.tooltip ? true : undefined}}"><span ng-if="t.value != null" class=rz-tick-value ng-attr-uib-tooltip="{{ t.valueTooltip }}" ng-attr-tooltip-placement={{t.valueTooltipPlacement}}>{{ t.value }}</span> <span ng-if="t.legend != null" class=rz-tick-legend>{{ t.legend }}</span></li></ul></div>') }]), t });